# -*- coding: utf-8 -*-
"""KNNVehiclesClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n2ZqaIOvLQwE46IOdiv6dt5kUB8QQcv-
"""

from google.colab import drive
drive.mount('/content/gdrive')

import os
import cv2
import numpy as np
from sklearn.metrics import classification_report, accuracy_score, ConfusionMatrixDisplay

from skimage.feature import hog
import matplotlib.pyplot as plt
import joblib

from sklearn.neighbors import KNeighborsClassifier
from tqdm import tqdm

def load_data_with_hog(directory, target_size = (128,128), hog_params = None):
  X = []
  Y = []
  labels = sorted(os.listdir(directory))

  if hog_params is None:
    hog_params = {
        'orientations': 9,
        'pixels_per_cell': (8,8),
        'cells_per_block': (2,2),
        'block_norm':'L2'
    }
    for label in labels:
      label_dir = os.path.join(directory,label)
      for file in  tqdm(os.listdir(label_dir),desc = f"Loading {label} images"):
        image_path = os.path.join(label_dir,file)
        image = cv2.imread(image_path)

        if image is not None:
          image = cv2.resize(image,target_size)
          gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
          hog_features = hog(gray_image, **hog_params)
          X.append(hog_features)
          Y.append(label)
  return np.array(X), np.array(Y)

train_dir = '/content/gdrive/MyDrive/DataforCV/data/train'
validation_dir = '/content/gdrive/MyDrive/DataforCV/data/val'
test_dir = '/content/gdrive/MyDrive/DataforCV/data/test'

train_features_file = 'train_features.npy'
train_labels_file = 'train_labels.npy'
validation_features_file = 'validation_features.npy'
validation_labels_file = 'validation_labels.npy'
test_features_file = 'test_features.npy'
test_labels_file = 'test_labels.npy'

if os.path.exists(train_features_file) and os.path.exists(train_labels_file):
    X_train = np.load(train_features_file)
    y_train = np.load(train_labels_file)
else:
    X_train, y_train = load_data_with_hog(train_dir)
    np.save(train_features_file, X_train)
    np.save(train_labels_file, y_train)

if os.path.exists(validation_features_file) and os.path.exists(validation_labels_file):
    X_validation = np.load(validation_features_file)
    y_validation = np.load(validation_labels_file)
else:
    X_validation, y_validation = load_data_with_hog(validation_dir)
    np.save(validation_features_file, X_validation)
    np.save(validation_labels_file, y_validation)

if os.path.exists(test_features_file) and os.path.exists(test_labels_file):
    X_test = np.load(test_features_file)
    y_test = np.load(test_labels_file)
else:
    X_test, y_test = load_data_with_hog(test_dir)
    np.save(test_features_file, X_test)
    np.save(test_labels_file, y_test)

#Tìm k có accuracy lớn nhất trên tập validation

acc = []
from sklearn import metrics
for i in range(1,40):
    neigh = KNeighborsClassifier(n_neighbors = i,weights = 'distance').fit(X_train,y_train)
    yhat = neigh.predict(X_validation)
    acc.append(metrics.accuracy_score(y_test, yhat))

plt.figure(figsize=(10,6))
plt.plot(range(1,40),acc,color = 'blue',linestyle='dashed',
         marker='o',markerfacecolor='red', markersize=10)
plt.title('accuracy vs. K Value')
plt.xlabel('K')
plt.ylabel('Accuracy')
print("Maximum accuracy:-",max(acc),"at K =",acc.index(max(acc)))

#Tìm K có error bé nhất trên tập validation

error_rate = []
for i in range(1,40):
 knn = KNeighborsClassifier(n_neighbors=i,weights = 'distance')
 knn.fit(X_train,y_train)
 pred_i = knn.predict(X_validation)
 error_rate.append(np.mean(pred_i != y_test))

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed',
         marker='o',markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')
print("Minimum error:-",min(error_rate),"at K =",error_rate.index(min(error_rate)))

#Knn với k = 19

knn = KNeighborsClassifier(n_neighbors = 19, weights= 'distance')
knn.fit(X_train,y_train)

knn.score(X_test,y_test)

from sklearn.model_selection import GridSearchCV

# Grid Search CV trên tập validation
param_grid = {
    'n_neighbors' : [i for i in range(40)],
    'weights' : ['uniform', 'distance'],
    'metric': ['euclidean', 'manhattan','minkowski']
}
knn = KNeighborsClassifier()
clf = GridSearchCV(knn,param_grid,cv=5,scoring ='accuracy')
clf.fit(X_validation,y_validation)

print('The best paramaters found:' , clf.best_params_)
best_knn = clf.best_estimator_
y_pred = best_knn.predict(X_test)
print("Accuracy on test set: ", accuracy_score(y_test,y_pred))

#Knn với tham số tối ưu tìm được từ GridSearchCV

knn2 = KNeighborsClassifier(metric='manhattan',n_neighbors= 15, weights= 'distance')
knn2.fit(X_validation,y_validation)

#Classification report

y_pred_test = knn2.predict(X_test)
accuracy_test = accuracy_score(y_test, y_pred_test)

print("Test Set Accuracy:", accuracy_test)
report_test = classification_report(y_test, y_pred_test, target_names=['Bicycle', 'Bus', 'Car', 'Motorbike', 'Truck'], zero_division=1)
print("Test Set Classification Report:")
print(report_test)

#Confusion matrix
target_names = ['Bicycle', 'Bus', 'Car', 'Motorbike', 'Truck']
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_test, normalize='true', values_format=".0%", display_labels=target_names)
plt.show()